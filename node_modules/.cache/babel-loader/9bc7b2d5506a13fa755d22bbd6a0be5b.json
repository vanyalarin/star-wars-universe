{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\vania\\\\Desktop\\\\JS\\\\React\\\\star-wars-universe\\\\src\\\\planets\\\\planets.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Planet from \"./planet/planet\";\n\nfunction Planets(props) {\n  _s();\n\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState([]);\n  const countPage = props.count;\n  useEffect(() => {\n    fetch(`https://swapi.dev/api/planets/?page=${countPage}`).then(res => res.json()).then(result => {\n      setIsLoaded(true);\n      setItems(result.results);\n    }, error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  }, [countPage]);\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 12\n    }, this);\n  } else if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: 600,\n        margin: \"auto\",\n        paddingTop: \"20px\",\n        marginBlock: \"20\",\n        display: \"grid\",\n        gridTemplateRows: \"1fr 1fr 1fr\",\n        gridTemplateColumns: \"1fr 1fr\"\n      },\n      children: items && items.map((item, index) => /*#__PURE__*/_jsxDEV(Planet, {\n        name: item.name,\n        climate: item.climate,\n        population: item.population\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n_s(Planets, \"m9AscAN57M/MODoTwSsNC5AuztA=\");\n\n_c = Planets;\nexport default Planets;\n\nvar _c;\n\n$RefreshReg$(_c, \"Planets\");","map":{"version":3,"sources":["C:/Users/vania/Desktop/JS/React/star-wars-universe/src/planets/planets.js"],"names":["React","useState","useEffect","Planet","Planets","props","error","setError","isLoaded","setIsLoaded","items","setItems","countPage","count","fetch","then","res","json","result","results","message","width","margin","paddingTop","marginBlock","display","gridTemplateRows","gridTemplateColumns","map","item","index","name","climate","population"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,iBAAnB;;AACA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AAAA;;AACtB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAMW,SAAS,GAAGP,KAAK,CAACQ,KAAxB;AAEAX,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,KAAK,CAAE,uCAAsCF,SAAU,EAAlD,CAAL,CACGG,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAGKG,MAAD,IAAY;AACVT,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,MAAAA,QAAQ,CAACO,MAAM,CAACC,OAAR,CAAR;AACD,KANL,EAQKb,KAAD,IAAW;AACTG,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAF,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,KAXL;AAaD,GAdQ,EAcN,CAACM,SAAD,CAdM,CAAT;;AAgBA,MAAIN,KAAJ,EAAW;AACT,wBAAO;AAAA,4BAAaA,KAAK,CAACc,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFD,MAEO,IAAI,CAACZ,QAAL,EAAe;AACpB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFM,MAEA;AACL,wBACE;AACE,MAAA,KAAK,EAAE;AACLa,QAAAA,KAAK,EAAE,GADF;AAELC,QAAAA,MAAM,EAAE,MAFH;AAGLC,QAAAA,UAAU,EAAE,MAHP;AAILC,QAAAA,WAAW,EAAE,IAJR;AAKLC,QAAAA,OAAO,EAAE,MALJ;AAMLC,QAAAA,gBAAgB,EAAE,aANb;AAOLC,QAAAA,mBAAmB,EAAE;AAPhB,OADT;AAAA,gBAWGjB,KAAK,IACJA,KAAK,CAACkB,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,kBACR,QAAC,MAAD;AAEE,QAAA,IAAI,EAAED,IAAI,CAACE,IAFb;AAGE,QAAA,OAAO,EAAEF,IAAI,CAACG,OAHhB;AAIE,QAAA,UAAU,EAAEH,IAAI,CAACI;AAJnB,SACOH,KADP;AAAA;AAAA;AAAA;AAAA,cADF;AAZJ;AAAA;AAAA;AAAA;AAAA,YADF;AAuBD;AACF;;GAnDQ1B,O;;KAAAA,O;AAoDT,eAAeA,OAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Planet from \"./planet/planet\";\r\nfunction Planets(props) {\r\n  const [error, setError] = useState(null);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [items, setItems] = useState([]);\r\n  const countPage = props.count;\r\n\r\n  useEffect(() => {\r\n    fetch(`https://swapi.dev/api/planets/?page=${countPage}`)\r\n      .then((res) => res.json())\r\n      .then(\r\n        (result) => {\r\n          setIsLoaded(true);\r\n          setItems(result.results);\r\n        },\r\n\r\n        (error) => {\r\n          setIsLoaded(true);\r\n          setError(error);\r\n        }\r\n      );\r\n  }, [countPage]);\r\n\r\n  if (error) {\r\n    return <div>Error: {error.message}</div>;\r\n  } else if (!isLoaded) {\r\n    return <div>Loading...</div>;\r\n  } else {\r\n    return (\r\n      <div\r\n        style={{\r\n          width: 600,\r\n          margin: \"auto\",\r\n          paddingTop: \"20px\",\r\n          marginBlock: \"20\",\r\n          display: \"grid\",\r\n          gridTemplateRows: \"1fr 1fr 1fr\",\r\n          gridTemplateColumns: \"1fr 1fr\",\r\n        }}\r\n      >\r\n        {items &&\r\n          items.map((item, index) => (\r\n            <Planet\r\n              key={index}\r\n              name={item.name}\r\n              climate={item.climate}\r\n              population={item.population}\r\n            />\r\n          ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Planets;\r\n"]},"metadata":{},"sourceType":"module"}