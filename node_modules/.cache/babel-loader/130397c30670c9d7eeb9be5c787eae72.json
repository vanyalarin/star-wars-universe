{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\vania\\\\Desktop\\\\JS\\\\React\\\\star-wars-universe\\\\src\\\\planets\\\\planets.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Planet from './planet/planet';\n\nfunction Planets() {\n  _s();\n\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState([]); // Note: the empty deps array [] means\n  // this useEffect will run once\n  // similar to componentDidMount()\n\n  useEffect(() => {\n    fetch(\"https://swapi.dev/api/planets/?page=1\").then(res => res.json()).then(result => {\n      setIsLoaded(true);\n      setItems(result.items);\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  }, []);\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 12\n    }, this);\n  } else if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: 400,\n        margin: 'auto',\n        paddingTop: '20px'\n      },\n      children: items && items.map((item, index) => /*#__PURE__*/_jsxDEV(Planet, {\n        name: items.name,\n        year: items.price\n      }, items.index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n_s(Planets, \"m9AscAN57M/MODoTwSsNC5AuztA=\");\n\n_c = Planets;\nexport default Planets;\n\nvar _c;\n\n$RefreshReg$(_c, \"Planets\");","map":{"version":3,"sources":["C:/Users/vania/Desktop/JS/React/star-wars-universe/src/planets/planets.js"],"names":["React","useState","useEffect","Planet","Planets","error","setError","isLoaded","setIsLoaded","items","setItems","fetch","then","res","json","result","message","width","margin","paddingTop","map","item","index","name","price"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,iBAAnB;;AACA,SAASC,OAAT,GAAoB;AAAA;;AAClB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC,CAHkB,CAKlB;AACA;AACA;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,KAAK,CAAC,uCAAD,CAAL,CACGC,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAGKG,MAAD,IAAY;AACVP,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,MAAAA,QAAQ,CAACK,MAAM,CAACN,KAAR,CAAR;AACD,KANL,EAOI;AACA;AACA;AACCJ,IAAAA,KAAD,IAAW;AACTG,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAF,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,KAbL;AAeD,GAhBQ,EAgBN,EAhBM,CAAT;;AAkBA,MAAIA,KAAJ,EAAW;AACT,wBAAO;AAAA,4BAAaA,KAAK,CAACW,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFD,MAEO,IAAI,CAACT,QAAL,EAAe;AACpB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFM,MAEA;AACL,wBACE;AAAK,MAAA,KAAK,EAAE;AACVU,QAAAA,KAAK,EAAE,GADG;AAEVC,QAAAA,MAAM,EAAE,MAFE;AAGVC,QAAAA,UAAU,EAAE;AAHF,OAAZ;AAAA,gBAKIV,KAAK,IAAIA,KAAK,CAACW,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,kBAErB,QAAC,MAAD;AAEE,QAAA,IAAI,EAAEb,KAAK,CAACc,IAFd;AAGE,QAAA,IAAI,EAAEd,KAAK,CAACe;AAHd,SACOf,KAAK,CAACa,KADb;AAAA;AAAA;AAAA;AAAA,cAFW;AALb;AAAA;AAAA;AAAA;AAAA,YADF;AAgBH;AACA;;GAhDQlB,O;;KAAAA,O;AAiDT,eAAeA,OAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport Planet from './planet/planet'\r\nfunction Planets()  {\r\n  const [error, setError] = useState(null);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [items, setItems] = useState([]);\r\n\r\n  // Note: the empty deps array [] means\r\n  // this useEffect will run once\r\n  // similar to componentDidMount()\r\n  useEffect(() => {\r\n    fetch(\"https://swapi.dev/api/planets/?page=1\")\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          setIsLoaded(true);\r\n          setItems(result.items);\r\n        },\r\n        // Note: it's important to handle errors here\r\n        // instead of a catch() block so that we don't swallow\r\n        // exceptions from actual bugs in components.\r\n        (error) => {\r\n          setIsLoaded(true);\r\n          setError(error);\r\n        }\r\n      )\r\n  }, [])\r\n\r\n  if (error) {\r\n    return <div>Error: {error.message}</div>;\r\n  } else if (!isLoaded) {\r\n    return <div>Loading...</div>;\r\n  } else {\r\n    return (\r\n      <div style={{\r\n        width: 400,\r\n        margin: 'auto',\r\n        paddingTop: '20px'\r\n      }}>\r\n         {items && items.map((item, index) => (\r\n         \r\n        <Planet \r\n          key={items.index}\r\n          name={items.name}\r\n          year={items.price}\r\n        />\r\n        ))}\r\n      </div>\r\n    )\r\n}\r\n}\r\nexport default Planets"]},"metadata":{},"sourceType":"module"}